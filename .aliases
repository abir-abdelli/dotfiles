#!/bin/sh

# ------------------------------ #
#         good manners           #
# ------------------------------ #
alias plz="sudo"


# ------------------------------ #
#              misc              #
# ------------------------------ #
alias upd="sudo apt update"
alias upg="sudo apt -y upgrade"
alias updg="sudo apt update && sudo apt -y upgrade"
alias zshrc="vim ~/.zshrc"
alias sourcez="source ~/.zshrc"
alias pingd="ping duckduckgo.com"
alias tohex="printf '%x\n'"
alias todec="printf '%d\n'"
alias cpssh="cat ~/.ssh/id_rsa.pub | clipcp"
# alias dud="du -d 1 -h"
# alias duf="du -sh"
# alias https="http --default-scheme=https"
alias brave="brave-browser"
alias zshconf="vim ~/.zshrc"
alias vimconf="vim ~/.vimrc"
# alias vscconf="vim ~/.config/Code"
alias x="xclip -selection clipboard -in"          # cut to clipboard
alias v="xclip -selection clipboard -out"         # paste from clipboard
alias c="xclip -selection clipboard -in -filter"  # copy clipboard
# ddccontrol
alias vscodium="GTK_IM_MODULE=xim codium --extensions-dir ~/.config/VSCodium/User/extensions"
alias code="vscodium"
alias dotfiles="vscodium ~/dotfiles"
tempdir() { cd $(mktemp -d) }
alias bat="batcat"
# networking
alias myip="curl https://ipinfo.io/ip; echo"
alias du="duf"

# ------------------------------ #
#              vpn               #
# ------------------------------ #
alias nordc="nordvpn connect"
alias nordd="nordvpn disconnect"
alias nords="nordvpn status"


# ------------------------------ #
#             docker             #
# ------------------------------ #
dockerfile() { docker run --rm -v /var/run/docker.sock:/var/run/docker.sock chenzj/dfimage $(docker images --filter=reference=$1 --format "{{.ID}}") }
# docker-compose
alias dk="docker compose"
# docker container
alias dc="docker container"
alias dcri="docker container run -it"
alias dcrd="docker container run -d"
alias dcei="docker container exec -it"
alias dcls="docker container ls"
alias dclsl="docker container ls -l"
alias dclslq="docker container ls -l -q"
alias dclsa="docker container ls -a"
alias dclsaq="docker container ls -a -q"
alias dcrm="docker container rm"
alias dcip="docker container inspect --format '{{ .NetworkSettings.IPAddress }}' "
dcrml() { if [ $(dclslq | wc -l) != 0 ]; then docker container rm $(dclslq); fi }
dcrma() { if [ $(dclsaq | wc -l) != 0 ]; then docker container rm $(dclsaq); fi }
dcrmaf() { if [ $(dclsaq | wc -l) != 0 ]; then docker container rm -f $(dclsaq); fi }
# docker image
alias di="docker image"
alias dils="docker image ls"
alias dirm="docker image rm"
alias disha="docker image inspect --format='{{ index .RepoDigests 0 }}'"
# docker service
alias ds="docker service"
alias dsip="docker service inspect --format '{{ .NetworkSettings.IPAddress }}' "
# docker network
alias dn="docker network"
# docker volume
alias dv="docker volume"

# ------------------------------ #
#             gradle             #
# ------------------------------ #
alias gradlec="./gradlew clean"
alias gradleb="./gradlew clean build"
alias gradlebr="./gradlew clean build --refresh-dependencies"
alias gradler="./gradlew bootRun"
alias gradlet="./gradlew test -i --test"

# ------------------------------ #
#              git               #
# ------------------------------ #
alias gp="git pull && git fetch -p"
alias gcr="git commit README.md -m 'Update README'"
alias gci="git commit .gitignore -m 'Update gitignore'"

# ------------------------------ #
#            hardhat             #
# ------------------------------ #
alias hh="npx hardhat"
alias hhc="npx hardhat compile"
alias hht="npx hardhat test"

# Fixes iexec command for newer version of nodejs.
alias iexec="npx iexec"

# ------------------------------ #
#           Chain RPC            #
# ------------------------------ #

rpc() {
    curl -s -X POST \
        --header "Content-Type: application/json" \
        --data '{"jsonrpc":"2.0", "id":1, "method":"'$2'", "params":'$3'}' \
        $1 | jq
}

lastblock() {
    rpc $1 'eth_getBlockByNumber' '["latest", false]' | jq .result
}
lastblocknumber() {
    rpc $1 'eth_getBlockByNumber' '["latest", false]' | jq .result.number | xargs printf '%d\n'
}
lastblockhash() {
    rpc $1 'eth_getBlockByNumber' '["latest", false]' | jq .result.hash
}
issyncing() {
    rpc $1 "eth_syncing" "[]" | jq .result
}
